name: k8s cluster with github actions
on:
  push:
    branches:
      - master

jobs:
  build-images:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Setup SSH Keys
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.g_SECRET_PUBLIC_KEY }}" > ~/.ssh/github.pub
          echo "${{ secrets.g_SECRET_PRIVATE_KEY }}" > ~/.ssh/github
          echo "${{ secrets.g_CONFIG }}" > ~/.ssh/config
          chmod 644 ~/.ssh/github.pub
          chmod 600 ~/.ssh/github
          chmod 644 ~/.ssh/config
      - name: Clone API repo
        run: |
          git clone --branch production --single-branch git@github.com:bukhbayar/k8s-api.git
          cd k8s-api/
          git checkout tags/v1.2
          cd ..
      - name: Build Docker image for API
        run: |
          docker build -t k8s-api:v1.2 -f docker-api/Dockerfile .
      - name: Setup awscli
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
          mkdir -p ~/.aws
          echo "[default]
          aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          region = ${{ secrets.AWS_REGION }}" > ~/.aws/credentials
      - name: AWS ECR login
        run: |
          aws ecr get-login-password \
            --region ${{ secrets.AWS_REGION }} \
            | docker login \
            --username AWS \
            --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-1.amazonaws.com
      - name: Setup ECR repo for k8s-api
        run: |
          export REPO_NAME=$(aws ecr describe-repositories | jq -r '.repositories[].repositoryName' | grep 'k8s-api')
          if [ "$REPO_NAME" != "k8s-api" ]; then
            aws ecr create-repository \
              --repository-name k8s-api \
              --image-scanning-configuration scanOnPush=true \
              --image-tag-mutability IMMUTABLE \
              --region ${{ secrets.AWS_REGION }}
          else
            echo "ECR repo for k8s-api has been created!"
          fi
      - name: Push k8s-api docker image to ECR repo
        run: |
          export IMAGE_TAG=$(aws ecr describe-images --repository-name k8s-api | jq -r '.imageDetails[].imageTags[]' | grep 'v1.2')
          if [ "$IMAGE_TAG" != "v1.2" ]; then
            docker tag k8s-api:v1.2 ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/k8s-api:v1.2
            docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/k8s-api:v1.2
          else
            echo "k8s-api docker image has been pushed!"
          fi
  deploy-cluster:
    runs-on: ubuntu-18.04
    needs: [build-images]
    steps:
      - uses: actions/checkout@v2
      - name: Setup eks
        run: |
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/download/latest_release/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
      - name: Setup kubectl
        run: |
          curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl
      - name: Setup awscli
        run: |
          sudo apt-get update
          sudo apt-get install python3-setuptools
          pip3 install wheel
          pip3 install awscli
          mkdir -p ~/.aws
          echo "[default]
          aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          region = ${{ secrets.AWS_REGION }}" > ~/.aws/credentials
      - name: Setup SSH Keys
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.k8S_SECRET_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          echo "${{ secrets.k8S_SECRET_PUBLIC_KEY }}" > ~/.ssh/id_rsa.pub
      - name: "Creating eks cluster"
        run: |
          export EXISTING_CLUSTER_NAME=$(eksctl get cluster | cut -f1  | grep "eks-cluster")
          if [[ ${EXISTING_CLUSTER_NAME} != "eks-cluster" ]] || [[ ! -n ${EXISTING_CLUSTER_NAME} ]]; then
            echo "creating eks-cluster ... "
            eksctl create cluster -f eks/eks-config.yml
          else
            echo "eks-cluster has been created!"
            aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name eks-cluster
          fi
      - name: "Deploying resources"
        run: |
          kubectl apply -f manifests/auto-scaler.yml
          kubectl -n kube-system annotate deployment.apps/cluster-autoscaler cluster-autoscaler.kubernetes.io/safe-to-evict="false" --overwrite
          kubectl apply -f manifests/deployment.yml
          kubectl apply -f manifests/service.yml
